service: "fn" # <name> of the service
provider:
  name: aws
  runtime: python3.9
  stage: prod
  region: us-west-2
  deploymentBucket:
    name: infra.opszero.com
  environment:
    DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}
  iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #     - s3:*
  #     Resource:
  #       Fn::Join:
  #         - ""
  #         - - "arn:aws:s3:::"
  #           - "Ref" : "setupname"
  #           - '/*'

functions:
  api:
    url:
      cors: true
    timeout: 29
    memorySize: 128
    handler: app.handler
  # handler:
  #   handler: handler.hello
  #   timeout: 300
  #   memorySize: 512
  #   events:
  #   - schedule: cron(0/15 18-21 ? * * *)
  # warm_up:
  #   handler: warm_up.handler
  #   timeout: 300
  #   memorySize: 512
  #   events:
  #   - schedule: cron(0/5 * ? * * *)
  #   environment:
  #     BASE_URL: { "Fn::Join" : ["", [" https://", { "Ref" : "ApiGatewayRestApi" }, ".execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}" ] ]  }

plugins:
  - serverless-python-requirements

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  pythonRequirements:
    dockerizePip: true
    dockerImage: python:3.9

package:
  patterns:
    - "!node_modules/**"

resources:
  Resources:
#     s3bucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: setupname
#         AccessControl: PublicRead
#         WebsiteConfiguration:
#           IndexDocument: index.html
